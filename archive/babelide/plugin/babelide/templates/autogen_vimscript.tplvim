
"=========================================================
" Utility functions
"=========================================================

function! _BabelIDE(entry_point)
    exec g:_uspy "BabelIDE_Manager.call_entry_point('" . a:entry_point . "')"
    if (exists('b:babel_return_val'))
        return b:babel_return_val
    else 
        return
endfunction
command! -complete=command -nargs=+ BabelIDE call _BabelIDE(<args>)

function! _BabelIDEAcceptAction(mode, str)
    return _BabelIDE("Base_accept_action")
endfunction


"=========================================================
" Auto generated function entry points
"=========================================================

{% for func_name,func in functions.iteritems() %}
    {% set fname, entry_point = func_name.split(':') %}
    command! -complete=command -nargs=* {{ fname }} BabelIDE("{{ entry_point }}")
{% endfor %}

"=========================================================
" Autogenerated autocommand definitions
"=========================================================

" Make sure we are inside an autocommand group
augroup babelide
au!
{% for func_name,func in autocommands.iteritems() %}
    {% set fname, entry_point = func_name.split(':') %}
    {% for acmd in func.__autocmd__ %}
        {% if not acmd['is_buffer_local'] %}
            {% for pattern in acmd['pattern'] %}
                au {{ acmd['event'] }} {{ pattern }} BabelIDE('{{ entry_point }}')
            {% endfor %}

        {% endif %}
    {% endfor %}
{% endfor %}
" Switch back to default group
augroup END

"=========================================================
" Global mappings defined by plugins
"=========================================================

{% for mapping in mappings %}
    {{ manager.call_entry_point('Base_build_mapping_to_python', mapping['mapping'], mapping['target']) }}
{% endfor %}
